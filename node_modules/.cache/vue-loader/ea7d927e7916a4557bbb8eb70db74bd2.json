{"remainingRequest":"/Users/sohyun/Desktop/school/visualization/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sohyun/Desktop/school/visualization/src/pages/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sohyun/Desktop/school/visualization/src/pages/Dashboard.vue","mtime":1639659494832},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  // Card\n} from \"@/components/index\";\n\nimport LineChart from '@/components/Charts/LineChart';\nimport * as chartConfigs from '@/components/Charts/config';\nimport config from '@/config';\nimport excels from './news_result.json';\n\n\nexport default {\n  name: 'Dashboard',\n  components: {\n    // Card,\n    LineChart,\n  },\n  data(){\n    return{\n      items: [\n      { subtitle: `<span class=\"font-weight-bold\">입력한 검색어</span> &mdash;` + this.$route.params.keyword},\n      { divider: true, inset: true },\n      { subtitle: '<span class=\"font-weight-bold\">선택한 날짜 범위</span> &mdash;' + this.$route.params.date[0] + \" ~ \" + this.$route.params.date[1]},\n      ],\n      date: [],\n      keyword: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      excel: excels,\n      bigLineChartCategories:[\n        \"Accounts\",\n        \"Purchases\",\n        \"Sessions\"\n      ],\n      bigLineChart: {\n        allData: [\n          [100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100],\n          [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120],\n          [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]\n        ],\n        activeIndex: 0,\n        chartData: { datasets: [{ }]},\n        extraOptions: chartConfigs.purpleChartOptions,\n        gradientColors: config.colors.primaryGradient,\n        gradientStops: [1, 0.4, 0],\n        categories: []\n      },\n      xList: [],\n      yList: [],\n      searchDic: {},\n      searchType: \"\",\n      showArticle: [],\n      showXList: [],\n      wordCount: [],\n      dicwordCount: {}\n    }\n  },\n  computed:{\n    enableRTL() {\n      return this.$route.query.enableRTL;\n    },\n    isRTL(){\n      return this.$rtl.isRTL;\n    }\n  },\n  methods:{\n    initBigChart(index) {\n      let chartData = {\n        datasets: [{\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.bigLineChart.allData[index]\n        }],\n        labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    openNew(sType){\n      this.searchType = sType\n      console.log(this.date) // 날짜 불러오기\n      console.log(this.keyword)\n      console.log(this.excel.sheet1.length)\n\n      this.date[0] = this.date[0].replace(/-/g, '.')\n      this.date[1] = this.date[1].replace(/-/g, '.')\n\n      var ss_day = new Date(this.date[0]);\n      var ee_day = new Date(this.date[1]);\n      // console.log(ss_day.getMonth(), ee_day.getMonth())\n      while(ss_day.getMonth() <= ee_day.getMonth()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var temp\n        temp = ss_day.getFullYear() + '.' + _mon_\n        console.log(temp)\n        // var dic = {}\n        // dic[temp] = {}\n        // this.showArticle[temp] = {}\n        this.showXList.push(temp)\n        ss_day.setMonth(ss_day.getMonth() + 1);\n      }\n      console.log(this.showXList)\n\n      for (var j=0; j < this.showXList.length; j++) {\n        // var dic = {}\n        this.showArticle.push({})\n        this.showArticle[j][this.showXList[j]] = []\n        for (var i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) == this.showXList[j] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            // var imsi = {}\n            // imsi[this.excel.sheet1[i].title] = this.excel.sheet1[i].url\n            this.showArticle[j][this.showXList[j]].push(this.excel.sheet1[i])\n            // this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n          }\n        }\n      }\n\n      console.log(this.showArticle)\n\n      this.getDateRangeData(this.date[0], this.date[1])\n\n      // console.log(this.excelData)\n\n      var tempWordCount = {}\n\n      if(this.searchType == \"daily\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date >= this.date[0] && this.excel.sheet1[i].date <= this.date[1] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date] += 1\n\n            var splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j].length == 0) {\n                continue\n              }\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n      else if(this.searchType == \"monthly\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) >= this.date[0].substring(0,7) && this.excel.sheet1[i].date.substring(0,7) <= this.date[1].substring(0,7) && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n\n            splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n\n      var sorted = Object.entries(tempWordCount).sort((a, b) => b[1] - a[1]);\n      for(var element of sorted) {\n        this.wordCount.push(element[0])\n        // console.log(element[0]+ \": \" + element[1]);\n        this.dicwordCount[element[0]] = element[1]\n      }\n      console.log(this.dicwordCount)\n\n      for(var key in this.searchDic) {\n        this.xList.push(key)\n        this.yList.push(this.searchDic[key])\n      }\n      let chartData = {\n        datasets: [{\n          label: '선택한 날짜 내에서 검색어에 따른 네이버 기사 개수로 시민들의 관심도 측정 그래프',\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.yList,\n        }],\n        labels: this.xList,\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = 0;\n\n      this.xList = []\n      this.yList = []\n      this.searchDic = {}\n    },\n    movewordCount() {\n      this.$router.push({name: 'WordCount', params: {words: this.dicwordCount}})\n    },\n    getDateRangeData(param1, param2) {  //param1은 시작일, param2는 종료일이다.\n      var ss_day = new Date(param1);\n      var ee_day = new Date(param2);\n      while(ss_day.getTime() <= ee_day.getTime()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var _day_ = ss_day.getDate();\n        _day_ = _day_ < 10 ? '0'+_day_ : _day_;\n        var temp\n        if(this.searchType == \"daily\") {\n          temp = ss_day.getFullYear() + '.' + _mon_ + '.' + _day_\n        }\n        else if(this.searchType == \"monthly\"){\n          temp = ss_day.getFullYear() + '.' + _mon_\n        }\n        this.searchDic[temp] = 0 // key 추가\n        ss_day.setDate(ss_day.getDate() + 1);\n      }\n    }\n  },\n  mounted(){\n    this.i18n = this.$i18n;\n    if (this.enableRTL) {\n      this.i18n.locale = 'ar';\n      this.$rtl.enableRTL();\n    }\n    this.openNew('daily')\n  },\n  created() {\n    this.date = this.$route.params.date;\n    console.log(this.date)\n    this.keyword = this.$route.params.keyword;\n    console.log(this.keyword)\n    console.log(this.excel.sheet1.length)\n  },\n  beforeDestroy() {\n    if (this.$rtl.isRTL) {\n      this.i18n.locale = 'en';\n      this.$rtl.disableRTL();\n    }\n  }\n}\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Dashboard.vue","sourceRoot":"src/pages","sourcesContent":["<template>\n  <div class=\"content\">\n    <br><p style=\"color: black; font-size:24px\" class=\"jb-bolder\">네이버 기사를 통한 시민들의 \"한강 의대생 사건\"에 대한 관심도 파악</p>\n    <h4.5 style=\"color: dimgray\">* 사용자가 선택한 날짜 범위에 따라 다른 시민들의 관심도를 확인할 수 있습니다. *</h4.5>\n    <v-col cols=\"col-12\">\n      <v-tabs>\n        <v-tabs-slider color=\"green\"></v-tabs-slider>\n        <v-tab style=\"color: grey\" @click=\"openNew('daily')\">Daily</v-tab>\n        <v-tab style=\"color: grey\" @click=\"openNew('monthly')\">Monthly</v-tab>\n      </v-tabs>\n      <div style=\"padding: 50px 10px;\">\n        <line-chart\n            height=\"auto\"\n            class=\"chart-area\"\n            ref=\"bigChart\"\n            chart-id=\"big-line-chart\"\n            :chart-data=\"bigLineChart.chartData\"\n            :gradient-colors=\"bigLineChart.gradientColors\"\n            :gradient-stops=\"bigLineChart.gradientStops\"\n            :extra-options=\"bigLineChart.extraOptions\">\n        </line-chart>\n      </div>\n      <v-btn @click=\"movewordCount\">단어 반복횟수 확인하기</v-btn>\n    </v-col>\n  </div>\n</template>\n\n<script>\nimport {\n  // Card\n} from \"@/components/index\";\n\nimport LineChart from '@/components/Charts/LineChart';\nimport * as chartConfigs from '@/components/Charts/config';\nimport config from '@/config';\nimport excels from './news_result.json';\n\n\nexport default {\n  name: 'Dashboard',\n  components: {\n    // Card,\n    LineChart,\n  },\n  data(){\n    return{\n      items: [\n      { subtitle: `<span class=\"font-weight-bold\">입력한 검색어</span> &mdash;` + this.$route.params.keyword},\n      { divider: true, inset: true },\n      { subtitle: '<span class=\"font-weight-bold\">선택한 날짜 범위</span> &mdash;' + this.$route.params.date[0] + \" ~ \" + this.$route.params.date[1]},\n      ],\n      date: [],\n      keyword: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      excel: excels,\n      bigLineChartCategories:[\n        \"Accounts\",\n        \"Purchases\",\n        \"Sessions\"\n      ],\n      bigLineChart: {\n        allData: [\n          [100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100],\n          [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120],\n          [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]\n        ],\n        activeIndex: 0,\n        chartData: { datasets: [{ }]},\n        extraOptions: chartConfigs.purpleChartOptions,\n        gradientColors: config.colors.primaryGradient,\n        gradientStops: [1, 0.4, 0],\n        categories: []\n      },\n      xList: [],\n      yList: [],\n      searchDic: {},\n      searchType: \"\",\n      showArticle: [],\n      showXList: [],\n      wordCount: [],\n      dicwordCount: {}\n    }\n  },\n  computed:{\n    enableRTL() {\n      return this.$route.query.enableRTL;\n    },\n    isRTL(){\n      return this.$rtl.isRTL;\n    }\n  },\n  methods:{\n    initBigChart(index) {\n      let chartData = {\n        datasets: [{\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.bigLineChart.allData[index]\n        }],\n        labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    openNew(sType){\n      this.searchType = sType\n      console.log(this.date) // 날짜 불러오기\n      console.log(this.keyword)\n      console.log(this.excel.sheet1.length)\n\n      this.date[0] = this.date[0].replace(/-/g, '.')\n      this.date[1] = this.date[1].replace(/-/g, '.')\n\n      var ss_day = new Date(this.date[0]);\n      var ee_day = new Date(this.date[1]);\n      // console.log(ss_day.getMonth(), ee_day.getMonth())\n      while(ss_day.getMonth() <= ee_day.getMonth()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var temp\n        temp = ss_day.getFullYear() + '.' + _mon_\n        console.log(temp)\n        // var dic = {}\n        // dic[temp] = {}\n        // this.showArticle[temp] = {}\n        this.showXList.push(temp)\n        ss_day.setMonth(ss_day.getMonth() + 1);\n      }\n      console.log(this.showXList)\n\n      for (var j=0; j < this.showXList.length; j++) {\n        // var dic = {}\n        this.showArticle.push({})\n        this.showArticle[j][this.showXList[j]] = []\n        for (var i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) == this.showXList[j] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            // var imsi = {}\n            // imsi[this.excel.sheet1[i].title] = this.excel.sheet1[i].url\n            this.showArticle[j][this.showXList[j]].push(this.excel.sheet1[i])\n            // this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n          }\n        }\n      }\n\n      console.log(this.showArticle)\n\n      this.getDateRangeData(this.date[0], this.date[1])\n\n      // console.log(this.excelData)\n\n      var tempWordCount = {}\n\n      if(this.searchType == \"daily\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date >= this.date[0] && this.excel.sheet1[i].date <= this.date[1] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date] += 1\n\n            var splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j].length == 0) {\n                continue\n              }\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n      else if(this.searchType == \"monthly\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) >= this.date[0].substring(0,7) && this.excel.sheet1[i].date.substring(0,7) <= this.date[1].substring(0,7) && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n\n            splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n\n      var sorted = Object.entries(tempWordCount).sort((a, b) => b[1] - a[1]);\n      for(var element of sorted) {\n        this.wordCount.push(element[0])\n        // console.log(element[0]+ \": \" + element[1]);\n        this.dicwordCount[element[0]] = element[1]\n      }\n      console.log(this.dicwordCount)\n\n      for(var key in this.searchDic) {\n        this.xList.push(key)\n        this.yList.push(this.searchDic[key])\n      }\n      let chartData = {\n        datasets: [{\n          label: '선택한 날짜 내에서 검색어에 따른 네이버 기사 개수로 시민들의 관심도 측정 그래프',\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.yList,\n        }],\n        labels: this.xList,\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = 0;\n\n      this.xList = []\n      this.yList = []\n      this.searchDic = {}\n    },\n    movewordCount() {\n      this.$router.push({name: 'WordCount', params: {words: this.dicwordCount}})\n    },\n    getDateRangeData(param1, param2) {  //param1은 시작일, param2는 종료일이다.\n      var ss_day = new Date(param1);\n      var ee_day = new Date(param2);\n      while(ss_day.getTime() <= ee_day.getTime()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var _day_ = ss_day.getDate();\n        _day_ = _day_ < 10 ? '0'+_day_ : _day_;\n        var temp\n        if(this.searchType == \"daily\") {\n          temp = ss_day.getFullYear() + '.' + _mon_ + '.' + _day_\n        }\n        else if(this.searchType == \"monthly\"){\n          temp = ss_day.getFullYear() + '.' + _mon_\n        }\n        this.searchDic[temp] = 0 // key 추가\n        ss_day.setDate(ss_day.getDate() + 1);\n      }\n    }\n  },\n  mounted(){\n    this.i18n = this.$i18n;\n    if (this.enableRTL) {\n      this.i18n.locale = 'ar';\n      this.$rtl.enableRTL();\n    }\n    this.openNew('daily')\n  },\n  created() {\n    this.date = this.$route.params.date;\n    console.log(this.date)\n    this.keyword = this.$route.params.keyword;\n    console.log(this.keyword)\n    console.log(this.excel.sheet1.length)\n  },\n  beforeDestroy() {\n    if (this.$rtl.isRTL) {\n      this.i18n.locale = 'en';\n      this.$rtl.disableRTL();\n    }\n  }\n}\n</script>\n<style>\n</style>\n"]}]}