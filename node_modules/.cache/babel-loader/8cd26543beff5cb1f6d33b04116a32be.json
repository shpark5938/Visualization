{"remainingRequest":"/Users/sohyun/Desktop/school/visualization/node_modules/babel-loader/lib/index.js!/Users/sohyun/Desktop/school/visualization/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sohyun/Desktop/school/visualization/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sohyun/Desktop/school/visualization/src/pages/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sohyun/Desktop/school/visualization/src/pages/Dashboard.vue","mtime":1639659494832},{"path":"/Users/sohyun/Desktop/school/visualization/babel.config.js","mtime":1639308038320},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sohyun/Desktop/school/visualization/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport \"@/components/index\";\nimport LineChart from '@/components/Charts/LineChart';\nimport * as chartConfigs from '@/components/Charts/config';\nimport config from '@/config';\nimport excels from \"./news_result.json\";\nexport default {\n  name: 'Dashboard',\n  components: {\n    // Card,\n    LineChart: LineChart\n  },\n  data: function data() {\n    return {\n      items: [{\n        subtitle: \"<span class=\\\"font-weight-bold\\\">\\uC785\\uB825\\uD55C \\uAC80\\uC0C9\\uC5B4</span> &mdash;\" + this.$route.params.keyword\n      }, {\n        divider: true,\n        inset: true\n      }, {\n        subtitle: '<span class=\"font-weight-bold\">선택한 날짜 범위</span> &mdash;' + this.$route.params.date[0] + \" ~ \" + this.$route.params.date[1]\n      }],\n      date: [],\n      keyword: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      excel: excels,\n      bigLineChartCategories: [\"Accounts\", \"Purchases\", \"Sessions\"],\n      bigLineChart: {\n        allData: [[100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100], [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120], [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]],\n        activeIndex: 0,\n        chartData: {\n          datasets: [{}]\n        },\n        extraOptions: chartConfigs.purpleChartOptions,\n        gradientColors: config.colors.primaryGradient,\n        gradientStops: [1, 0.4, 0],\n        categories: []\n      },\n      xList: [],\n      yList: [],\n      searchDic: {},\n      searchType: \"\",\n      showArticle: [],\n      showXList: [],\n      wordCount: [],\n      dicwordCount: {}\n    };\n  },\n  computed: {\n    enableRTL: function enableRTL() {\n      return this.$route.query.enableRTL;\n    },\n    isRTL: function isRTL() {\n      return this.$rtl.isRTL;\n    }\n  },\n  methods: {\n    initBigChart: function initBigChart(index) {\n      var chartData = {\n        datasets: [{\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.bigLineChart.allData[index]\n        }],\n        labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n      };\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    openNew: function openNew(sType) {\n      this.searchType = sType;\n      console.log(this.date); // 날짜 불러오기\n\n      console.log(this.keyword);\n      console.log(this.excel.sheet1.length);\n      this.date[0] = this.date[0].replace(/-/g, '.');\n      this.date[1] = this.date[1].replace(/-/g, '.');\n      var ss_day = new Date(this.date[0]);\n      var ee_day = new Date(this.date[1]); // console.log(ss_day.getMonth(), ee_day.getMonth())\n\n      while (ss_day.getMonth() <= ee_day.getMonth()) {\n        var _mon_ = ss_day.getMonth() + 1;\n\n        _mon_ = _mon_ < 10 ? '0' + _mon_ : _mon_;\n        var temp;\n        temp = ss_day.getFullYear() + '.' + _mon_;\n        console.log(temp); // var dic = {}\n        // dic[temp] = {}\n        // this.showArticle[temp] = {}\n\n        this.showXList.push(temp);\n        ss_day.setMonth(ss_day.getMonth() + 1);\n      }\n\n      console.log(this.showXList);\n\n      for (var j = 0; j < this.showXList.length; j++) {\n        // var dic = {}\n        this.showArticle.push({});\n        this.showArticle[j][this.showXList[j]] = [];\n\n        for (var i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0, 7) == this.showXList[j] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            // var imsi = {}\n            // imsi[this.excel.sheet1[i].title] = this.excel.sheet1[i].url\n            this.showArticle[j][this.showXList[j]].push(this.excel.sheet1[i]); // this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n          }\n        }\n      }\n\n      console.log(this.showArticle);\n      this.getDateRangeData(this.date[0], this.date[1]); // console.log(this.excelData)\n\n      var tempWordCount = {};\n\n      if (this.searchType == \"daily\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date >= this.date[0] && this.excel.sheet1[i].date <= this.date[1] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date] += 1;\n            var splitWord = this.excel.sheet1[i].title.replace(/,/g, \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \"); //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n\n            for (j = 0; j < splitWord.length; j++) {\n              if (splitWord[j].length == 0) {\n                continue;\n              }\n\n              if (splitWord[j] in tempWordCount) {\n                tempWordCount[splitWord[j]] += 1;\n              } else {\n                tempWordCount[splitWord[j]] = 1;\n              }\n            }\n          }\n        }\n      } else if (this.searchType == \"monthly\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0, 7) >= this.date[0].substring(0, 7) && this.excel.sheet1[i].date.substring(0, 7) <= this.date[1].substring(0, 7) && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date.substring(0, 7)] += 1;\n            splitWord = this.excel.sheet1[i].title.replace(/,/g, \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \"); //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n\n            for (j = 0; j < splitWord.length; j++) {\n              if (splitWord[j] in tempWordCount) {\n                tempWordCount[splitWord[j]] += 1;\n              } else {\n                tempWordCount[splitWord[j]] = 1;\n              }\n            }\n          }\n        }\n      }\n\n      var sorted = Object.entries(tempWordCount).sort(function (a, b) {\n        return b[1] - a[1];\n      });\n\n      var _iterator = _createForOfIteratorHelper(sorted),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n          this.wordCount.push(element[0]); // console.log(element[0]+ \": \" + element[1]);\n\n          this.dicwordCount[element[0]] = element[1];\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      console.log(this.dicwordCount);\n\n      for (var key in this.searchDic) {\n        this.xList.push(key);\n        this.yList.push(this.searchDic[key]);\n      }\n\n      var chartData = {\n        datasets: [{\n          label: '선택한 날짜 내에서 검색어에 따른 네이버 기사 개수로 시민들의 관심도 측정 그래프',\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.yList\n        }],\n        labels: this.xList\n      };\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = 0;\n      this.xList = [];\n      this.yList = [];\n      this.searchDic = {};\n    },\n    movewordCount: function movewordCount() {\n      this.$router.push({\n        name: 'WordCount',\n        params: {\n          words: this.dicwordCount\n        }\n      });\n    },\n    getDateRangeData: function getDateRangeData(param1, param2) {\n      //param1은 시작일, param2는 종료일이다.\n      var ss_day = new Date(param1);\n      var ee_day = new Date(param2);\n\n      while (ss_day.getTime() <= ee_day.getTime()) {\n        var _mon_ = ss_day.getMonth() + 1;\n\n        _mon_ = _mon_ < 10 ? '0' + _mon_ : _mon_;\n\n        var _day_ = ss_day.getDate();\n\n        _day_ = _day_ < 10 ? '0' + _day_ : _day_;\n        var temp;\n\n        if (this.searchType == \"daily\") {\n          temp = ss_day.getFullYear() + '.' + _mon_ + '.' + _day_;\n        } else if (this.searchType == \"monthly\") {\n          temp = ss_day.getFullYear() + '.' + _mon_;\n        }\n\n        this.searchDic[temp] = 0; // key 추가\n\n        ss_day.setDate(ss_day.getDate() + 1);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.i18n = this.$i18n;\n\n    if (this.enableRTL) {\n      this.i18n.locale = 'ar';\n      this.$rtl.enableRTL();\n    }\n\n    this.openNew('daily');\n  },\n  created: function created() {\n    this.date = this.$route.params.date;\n    console.log(this.date);\n    this.keyword = this.$route.params.keyword;\n    console.log(this.keyword);\n    console.log(this.excel.sheet1.length);\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.$rtl.isRTL) {\n      this.i18n.locale = 'en';\n      this.$rtl.disableRTL();\n    }\n  }\n};",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,OAEA,oBAFA;AAIA,OAAA,SAAA,MAAA,+BAAA;AACA,OAAA,KAAA,YAAA,MAAA,4BAAA;AACA,OAAA,MAAA,MAAA,UAAA;AACA,OAAA,MAAA;AAGA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,UAAA,EAAA;AACA;AACA,IAAA,SAAA,EAAA;AAFA,GAFA;AAMA,EAAA,IANA,kBAMA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,CACA;AAAA,QAAA,QAAA,EAAA,0FAAA,KAAA,MAAA,CAAA,MAAA,CAAA;AAAA,OADA,EAEA;AAAA,QAAA,OAAA,EAAA,IAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,QAAA,EAAA,4DAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,KAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AAAA,OAHA,CADA;AAMA,MAAA,IAAA,EAAA,EANA;AAOA,MAAA,OAAA,EAAA,EAPA;AAQA,MAAA,SAAA,EAAA,EARA;AASA,MAAA,OAAA,EAAA,EATA;AAUA,MAAA,KAAA,EAAA,MAVA;AAWA,MAAA,sBAAA,EAAA,CACA,UADA,EAEA,WAFA,EAGA,UAHA,CAXA;AAgBA,MAAA,YAAA,EAAA;AACA,QAAA,OAAA,EAAA,CACA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CADA,EAEA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,CAFA,EAGA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,CAHA,CADA;AAMA,QAAA,WAAA,EAAA,CANA;AAOA,QAAA,SAAA,EAAA;AAAA,UAAA,QAAA,EAAA,CAAA,EAAA;AAAA,SAPA;AAQA,QAAA,YAAA,EAAA,YAAA,CAAA,kBARA;AASA,QAAA,cAAA,EAAA,MAAA,CAAA,MAAA,CAAA,eATA;AAUA,QAAA,aAAA,EAAA,CAAA,CAAA,EAAA,GAAA,EAAA,CAAA,CAVA;AAWA,QAAA,UAAA,EAAA;AAXA,OAhBA;AA6BA,MAAA,KAAA,EAAA,EA7BA;AA8BA,MAAA,KAAA,EAAA,EA9BA;AA+BA,MAAA,SAAA,EAAA,EA/BA;AAgCA,MAAA,UAAA,EAAA,EAhCA;AAiCA,MAAA,WAAA,EAAA,EAjCA;AAkCA,MAAA,SAAA,EAAA,EAlCA;AAmCA,MAAA,SAAA,EAAA,EAnCA;AAoCA,MAAA,YAAA,EAAA;AApCA,KAAA;AAsCA,GA7CA;AA8CA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA;AACA,KAHA;AAIA,IAAA,KAJA,mBAIA;AACA,aAAA,KAAA,IAAA,CAAA,KAAA;AACA;AANA,GA9CA;AAsDA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,KADA,EACA;AACA,UAAA,SAAA,GAAA;AACA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,WAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OAFA;AAGA,UAAA,WAAA,EAAA,CAHA;AAIA,UAAA,UAAA,EAAA,EAJA;AAKA,UAAA,gBAAA,EAAA,GALA;AAMA,UAAA,oBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OANA;AAOA,UAAA,gBAAA,EAAA,qBAPA;AAQA,UAAA,yBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OARA;AASA,UAAA,gBAAA,EAAA,EATA;AAUA,UAAA,gBAAA,EAAA,CAVA;AAWA,UAAA,qBAAA,EAAA,EAXA;AAYA,UAAA,WAAA,EAAA,CAZA;AAaA,UAAA,IAAA,EAAA,KAAA,YAAA,CAAA,OAAA,CAAA,KAAA;AAbA,SAAA,CADA;AAgBA,QAAA,MAAA,EAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA;AAhBA,OAAA;AAkBA,WAAA,KAAA,CAAA,QAAA,CAAA,eAAA,CAAA,SAAA;AACA,WAAA,YAAA,CAAA,SAAA,GAAA,SAAA;AACA,WAAA,YAAA,CAAA,WAAA,GAAA,KAAA;AACA,KAvBA;AAwBA,IAAA,OAxBA,mBAwBA,KAxBA,EAwBA;AACA,WAAA,UAAA,GAAA,KAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,IAAA,EAFA,CAEA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,OAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA;AAEA,WAAA,IAAA,CAAA,CAAA,IAAA,KAAA,IAAA,CAAA,CAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,CAAA;AACA,WAAA,IAAA,CAAA,CAAA,IAAA,KAAA,IAAA,CAAA,CAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,CAAA;AAEA,UAAA,MAAA,GAAA,IAAA,IAAA,CAAA,KAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,IAAA,CAAA,KAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAVA,CAWA;;AACA,aAAA,MAAA,CAAA,QAAA,MAAA,MAAA,CAAA,QAAA,EAAA,EAAA;AACA,YAAA,KAAA,GAAA,MAAA,CAAA,QAAA,KAAA,CAAA;;AACA,QAAA,KAAA,GAAA,KAAA,GAAA,EAAA,GAAA,MAAA,KAAA,GAAA,KAAA;AACA,YAAA,IAAA;AACA,QAAA,IAAA,GAAA,MAAA,CAAA,WAAA,KAAA,GAAA,GAAA,KAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,IAAA,EALA,CAMA;AACA;AACA;;AACA,aAAA,SAAA,CAAA,IAAA,CAAA,IAAA;AACA,QAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,QAAA,KAAA,CAAA;AACA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,SAAA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA;AACA,aAAA,WAAA,CAAA,IAAA,CAAA,EAAA;AACA,aAAA,WAAA,CAAA,CAAA,EAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,EAAA;;AACA,aAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA,IAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,KAAA,OAAA,KAAA,CAAA,CAAA,EAAA;AACA;AACA;AACA,iBAAA,WAAA,CAAA,CAAA,EAAA,KAAA,SAAA,CAAA,CAAA,CAAA,EAAA,IAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAHA,CAIA;AACA;AACA;AACA;;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,WAAA;AAEA,WAAA,gBAAA,CAAA,KAAA,IAAA,CAAA,CAAA,CAAA,EAAA,KAAA,IAAA,CAAA,CAAA,CAAA,EA1CA,CA4CA;;AAEA,UAAA,aAAA,GAAA,EAAA;;AAEA,UAAA,KAAA,UAAA,IAAA,OAAA,EAAA;AACA,aAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,KAAA,OAAA,KAAA,CAAA,CAAA,EAAA;AACA,iBAAA,SAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,KAAA,CAAA;AAEA,gBAAA,SAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,KAAA,CAAA,GAAA,CAAA,CAHA,CAGA;;AAEA,iBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EACA;AACA,kBAAA,SAAA,CAAA,CAAA,CAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA;AACA;;AACA,kBAAA,SAAA,CAAA,CAAA,CAAA,IAAA,aAAA,EAAA;AACA,gBAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,eAFA,MAGA;AACA,gBAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA;AACA;AACA;AACA;AACA,OArBA,MAsBA,IAAA,KAAA,UAAA,IAAA,SAAA,EAAA;AACA,aAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,KAAA,KAAA,IAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,KAAA,KAAA,IAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,IAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,KAAA,OAAA,KAAA,CAAA,CAAA,EAAA;AACA,iBAAA,SAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,IAAA,CAAA,SAAA,CAAA,CAAA,EAAA,CAAA,CAAA,KAAA,CAAA;AAEA,YAAA,SAAA,GAAA,KAAA,KAAA,CAAA,MAAA,CAAA,CAAA,EAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAAA,KAAA,CAAA,GAAA,CAAA,CAHA,CAGA;;AACA,iBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EACA;AACA,kBAAA,SAAA,CAAA,CAAA,CAAA,IAAA,aAAA,EAAA;AACA,gBAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,eAFA,MAGA;AACA,gBAAA,aAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAA,MAAA,GAAA,MAAA,CAAA,OAAA,CAAA,aAAA,EAAA,IAAA,CAAA,UAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA,CAAA;;AAzFA,iDA0FA,MA1FA;AAAA;;AAAA;AA0FA,4DAAA;AAAA,cAAA,OAAA;AACA,eAAA,SAAA,CAAA,IAAA,CAAA,OAAA,CAAA,CAAA,CAAA,EADA,CAEA;;AACA,eAAA,YAAA,CAAA,OAAA,CAAA,CAAA,CAAA,IAAA,OAAA,CAAA,CAAA,CAAA;AACA;AA9FA;AAAA;AAAA;AAAA;AAAA;;AA+FA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,YAAA;;AAEA,WAAA,IAAA,GAAA,IAAA,KAAA,SAAA,EAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,GAAA;AACA,aAAA,KAAA,CAAA,IAAA,CAAA,KAAA,SAAA,CAAA,GAAA,CAAA;AACA;;AACA,UAAA,SAAA,GAAA;AACA,QAAA,QAAA,EAAA,CAAA;AACA,UAAA,KAAA,EAAA,+CADA;AAEA,UAAA,IAAA,EAAA,IAFA;AAGA,UAAA,WAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OAHA;AAIA,UAAA,WAAA,EAAA,CAJA;AAKA,UAAA,UAAA,EAAA,EALA;AAMA,UAAA,gBAAA,EAAA,GANA;AAOA,UAAA,oBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OAPA;AAQA,UAAA,gBAAA,EAAA,qBARA;AASA,UAAA,yBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,OATA;AAUA,UAAA,gBAAA,EAAA,EAVA;AAWA,UAAA,gBAAA,EAAA,CAXA;AAYA,UAAA,qBAAA,EAAA,EAZA;AAaA,UAAA,WAAA,EAAA,CAbA;AAcA,UAAA,IAAA,EAAA,KAAA;AAdA,SAAA,CADA;AAiBA,QAAA,MAAA,EAAA,KAAA;AAjBA,OAAA;AAmBA,WAAA,KAAA,CAAA,QAAA,CAAA,eAAA,CAAA,SAAA;AACA,WAAA,YAAA,CAAA,SAAA,GAAA,SAAA;AACA,WAAA,YAAA,CAAA,WAAA,GAAA,CAAA;AAEA,WAAA,KAAA,GAAA,EAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,WAAA,SAAA,GAAA,EAAA;AACA,KAvJA;AAwJA,IAAA,aAxJA,2BAwJA;AACA,WAAA,OAAA,CAAA,IAAA,CAAA;AAAA,QAAA,IAAA,EAAA,WAAA;AAAA,QAAA,MAAA,EAAA;AAAA,UAAA,KAAA,EAAA,KAAA;AAAA;AAAA,OAAA;AACA,KA1JA;AA2JA,IAAA,gBA3JA,4BA2JA,MA3JA,EA2JA,MA3JA,EA2JA;AAAA;AACA,UAAA,MAAA,GAAA,IAAA,IAAA,CAAA,MAAA,CAAA;AACA,UAAA,MAAA,GAAA,IAAA,IAAA,CAAA,MAAA,CAAA;;AACA,aAAA,MAAA,CAAA,OAAA,MAAA,MAAA,CAAA,OAAA,EAAA,EAAA;AACA,YAAA,KAAA,GAAA,MAAA,CAAA,QAAA,KAAA,CAAA;;AACA,QAAA,KAAA,GAAA,KAAA,GAAA,EAAA,GAAA,MAAA,KAAA,GAAA,KAAA;;AACA,YAAA,KAAA,GAAA,MAAA,CAAA,OAAA,EAAA;;AACA,QAAA,KAAA,GAAA,KAAA,GAAA,EAAA,GAAA,MAAA,KAAA,GAAA,KAAA;AACA,YAAA,IAAA;;AACA,YAAA,KAAA,UAAA,IAAA,OAAA,EAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,WAAA,KAAA,GAAA,GAAA,KAAA,GAAA,GAAA,GAAA,KAAA;AACA,SAFA,MAGA,IAAA,KAAA,UAAA,IAAA,SAAA,EAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,WAAA,KAAA,GAAA,GAAA,KAAA;AACA;;AACA,aAAA,SAAA,CAAA,IAAA,IAAA,CAAA,CAZA,CAYA;;AACA,QAAA,MAAA,CAAA,OAAA,CAAA,MAAA,CAAA,OAAA,KAAA,CAAA;AACA;AACA;AA7KA,GAtDA;AAqOA,EAAA,OArOA,qBAqOA;AACA,SAAA,IAAA,GAAA,KAAA,KAAA;;AACA,QAAA,KAAA,SAAA,EAAA;AACA,WAAA,IAAA,CAAA,MAAA,GAAA,IAAA;AACA,WAAA,IAAA,CAAA,SAAA;AACA;;AACA,SAAA,OAAA,CAAA,OAAA;AACA,GA5OA;AA6OA,EAAA,OA7OA,qBA6OA;AACA,SAAA,IAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,IAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,IAAA;AACA,SAAA,OAAA,GAAA,KAAA,MAAA,CAAA,MAAA,CAAA,OAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,OAAA;AACA,IAAA,OAAA,CAAA,GAAA,CAAA,KAAA,KAAA,CAAA,MAAA,CAAA,MAAA;AACA,GAnPA;AAoPA,EAAA,aApPA,2BAoPA;AACA,QAAA,KAAA,IAAA,CAAA,KAAA,EAAA;AACA,WAAA,IAAA,CAAA,MAAA,GAAA,IAAA;AACA,WAAA,IAAA,CAAA,UAAA;AACA;AACA;AAzPA,CAAA","sourcesContent":["<template>\n  <div class=\"content\">\n    <br><p style=\"color: black; font-size:24px\" class=\"jb-bolder\">네이버 기사를 통한 시민들의 \"한강 의대생 사건\"에 대한 관심도 파악</p>\n    <h4.5 style=\"color: dimgray\">* 사용자가 선택한 날짜 범위에 따라 다른 시민들의 관심도를 확인할 수 있습니다. *</h4.5>\n    <v-col cols=\"col-12\">\n      <v-tabs>\n        <v-tabs-slider color=\"green\"></v-tabs-slider>\n        <v-tab style=\"color: grey\" @click=\"openNew('daily')\">Daily</v-tab>\n        <v-tab style=\"color: grey\" @click=\"openNew('monthly')\">Monthly</v-tab>\n      </v-tabs>\n      <div style=\"padding: 50px 10px;\">\n        <line-chart\n            height=\"auto\"\n            class=\"chart-area\"\n            ref=\"bigChart\"\n            chart-id=\"big-line-chart\"\n            :chart-data=\"bigLineChart.chartData\"\n            :gradient-colors=\"bigLineChart.gradientColors\"\n            :gradient-stops=\"bigLineChart.gradientStops\"\n            :extra-options=\"bigLineChart.extraOptions\">\n        </line-chart>\n      </div>\n      <v-btn @click=\"movewordCount\">단어 반복횟수 확인하기</v-btn>\n    </v-col>\n  </div>\n</template>\n\n<script>\nimport {\n  // Card\n} from \"@/components/index\";\n\nimport LineChart from '@/components/Charts/LineChart';\nimport * as chartConfigs from '@/components/Charts/config';\nimport config from '@/config';\nimport excels from './news_result.json';\n\n\nexport default {\n  name: 'Dashboard',\n  components: {\n    // Card,\n    LineChart,\n  },\n  data(){\n    return{\n      items: [\n      { subtitle: `<span class=\"font-weight-bold\">입력한 검색어</span> &mdash;` + this.$route.params.keyword},\n      { divider: true, inset: true },\n      { subtitle: '<span class=\"font-weight-bold\">선택한 날짜 범위</span> &mdash;' + this.$route.params.date[0] + \" ~ \" + this.$route.params.date[1]},\n      ],\n      date: [],\n      keyword: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      excel: excels,\n      bigLineChartCategories:[\n        \"Accounts\",\n        \"Purchases\",\n        \"Sessions\"\n      ],\n      bigLineChart: {\n        allData: [\n          [100, 70, 90, 70, 85, 60, 75, 60, 90, 80, 110, 100],\n          [80, 120, 105, 110, 95, 105, 90, 100, 80, 95, 70, 120],\n          [60, 80, 65, 130, 80, 105, 90, 130, 70, 115, 60, 130]\n        ],\n        activeIndex: 0,\n        chartData: { datasets: [{ }]},\n        extraOptions: chartConfigs.purpleChartOptions,\n        gradientColors: config.colors.primaryGradient,\n        gradientStops: [1, 0.4, 0],\n        categories: []\n      },\n      xList: [],\n      yList: [],\n      searchDic: {},\n      searchType: \"\",\n      showArticle: [],\n      showXList: [],\n      wordCount: [],\n      dicwordCount: {}\n    }\n  },\n  computed:{\n    enableRTL() {\n      return this.$route.query.enableRTL;\n    },\n    isRTL(){\n      return this.$rtl.isRTL;\n    }\n  },\n  methods:{\n    initBigChart(index) {\n      let chartData = {\n        datasets: [{\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.bigLineChart.allData[index]\n        }],\n        labels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'],\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = index;\n    },\n    openNew(sType){\n      this.searchType = sType\n      console.log(this.date) // 날짜 불러오기\n      console.log(this.keyword)\n      console.log(this.excel.sheet1.length)\n\n      this.date[0] = this.date[0].replace(/-/g, '.')\n      this.date[1] = this.date[1].replace(/-/g, '.')\n\n      var ss_day = new Date(this.date[0]);\n      var ee_day = new Date(this.date[1]);\n      // console.log(ss_day.getMonth(), ee_day.getMonth())\n      while(ss_day.getMonth() <= ee_day.getMonth()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var temp\n        temp = ss_day.getFullYear() + '.' + _mon_\n        console.log(temp)\n        // var dic = {}\n        // dic[temp] = {}\n        // this.showArticle[temp] = {}\n        this.showXList.push(temp)\n        ss_day.setMonth(ss_day.getMonth() + 1);\n      }\n      console.log(this.showXList)\n\n      for (var j=0; j < this.showXList.length; j++) {\n        // var dic = {}\n        this.showArticle.push({})\n        this.showArticle[j][this.showXList[j]] = []\n        for (var i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) == this.showXList[j] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            // var imsi = {}\n            // imsi[this.excel.sheet1[i].title] = this.excel.sheet1[i].url\n            this.showArticle[j][this.showXList[j]].push(this.excel.sheet1[i])\n            // this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n          }\n        }\n      }\n\n      console.log(this.showArticle)\n\n      this.getDateRangeData(this.date[0], this.date[1])\n\n      // console.log(this.excelData)\n\n      var tempWordCount = {}\n\n      if(this.searchType == \"daily\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date >= this.date[0] && this.excel.sheet1[i].date <= this.date[1] && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date] += 1\n\n            var splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j].length == 0) {\n                continue\n              }\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n      else if(this.searchType == \"monthly\") {\n        for (i = 0; i < this.excel.sheet1.length; i++) {\n          if (this.excel.sheet1[i].date.substring(0,7) >= this.date[0].substring(0,7) && this.excel.sheet1[i].date.substring(0,7) <= this.date[1].substring(0,7) && this.excel.sheet1[i].title.indexOf(this.keyword) != -1) {\n            this.searchDic[this.excel.sheet1[i].date.substring(0,7)] += 1\n\n            splitWord = this.excel.sheet1[i].title.replace(/,/g , \" \").replace(/\"/g, \" \").replace(/”/g, \" \").replace(/“/g, \" \").replace(/'/g, \" \").replace(/’/g, \" \").replace(/…/g, \" \").replace(/‘/g, \" \").split(\" \") //.replace(/\"/g, \" \").replace(/“/g, \" \").replace(/.../g, \" \").replace(/”/g, \" \").replace(/'/g, \" \").split(\" \")\n            for(j = 0; j<splitWord.length; j++)\n            {\n              if(splitWord[j] in tempWordCount){\n                tempWordCount[splitWord[j]] += 1\n              }\n              else{\n                tempWordCount[splitWord[j]] = 1\n              }\n            }\n          }\n        }\n      }\n\n      var sorted = Object.entries(tempWordCount).sort((a, b) => b[1] - a[1]);\n      for(var element of sorted) {\n        this.wordCount.push(element[0])\n        // console.log(element[0]+ \": \" + element[1]);\n        this.dicwordCount[element[0]] = element[1]\n      }\n      console.log(this.dicwordCount)\n\n      for(var key in this.searchDic) {\n        this.xList.push(key)\n        this.yList.push(this.searchDic[key])\n      }\n      let chartData = {\n        datasets: [{\n          label: '선택한 날짜 내에서 검색어에 따른 네이버 기사 개수로 시민들의 관심도 측정 그래프',\n          fill: true,\n          borderColor: config.colors.primary,\n          borderWidth: 2,\n          borderDash: [],\n          borderDashOffset: 0.0,\n          pointBackgroundColor: config.colors.primary,\n          pointBorderColor: 'rgba(255,255,255,0)',\n          pointHoverBackgroundColor: config.colors.primary,\n          pointBorderWidth: 20,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 15,\n          pointRadius: 4,\n          data: this.yList,\n        }],\n        labels: this.xList,\n      }\n      this.$refs.bigChart.updateGradients(chartData);\n      this.bigLineChart.chartData = chartData;\n      this.bigLineChart.activeIndex = 0;\n\n      this.xList = []\n      this.yList = []\n      this.searchDic = {}\n    },\n    movewordCount() {\n      this.$router.push({name: 'WordCount', params: {words: this.dicwordCount}})\n    },\n    getDateRangeData(param1, param2) {  //param1은 시작일, param2는 종료일이다.\n      var ss_day = new Date(param1);\n      var ee_day = new Date(param2);\n      while(ss_day.getTime() <= ee_day.getTime()){\n        var _mon_ = (ss_day.getMonth()+1);\n        _mon_ = _mon_ < 10 ? '0'+_mon_ : _mon_;\n        var _day_ = ss_day.getDate();\n        _day_ = _day_ < 10 ? '0'+_day_ : _day_;\n        var temp\n        if(this.searchType == \"daily\") {\n          temp = ss_day.getFullYear() + '.' + _mon_ + '.' + _day_\n        }\n        else if(this.searchType == \"monthly\"){\n          temp = ss_day.getFullYear() + '.' + _mon_\n        }\n        this.searchDic[temp] = 0 // key 추가\n        ss_day.setDate(ss_day.getDate() + 1);\n      }\n    }\n  },\n  mounted(){\n    this.i18n = this.$i18n;\n    if (this.enableRTL) {\n      this.i18n.locale = 'ar';\n      this.$rtl.enableRTL();\n    }\n    this.openNew('daily')\n  },\n  created() {\n    this.date = this.$route.params.date;\n    console.log(this.date)\n    this.keyword = this.$route.params.keyword;\n    console.log(this.keyword)\n    console.log(this.excel.sheet1.length)\n  },\n  beforeDestroy() {\n    if (this.$rtl.isRTL) {\n      this.i18n.locale = 'en';\n      this.$rtl.disableRTL();\n    }\n  }\n}\n</script>\n<style>\n</style>\n"],"sourceRoot":"src/pages"}]}